# Définit les identifiants utilisateur et groupe utilisés par les processus worker. Si le groupe est omis, un groupe dont le nom est égal à celui de l'utilisateur est utilisé.
user  nginx;
# Définit le nombre de processus de travail.
worker_processes  auto;
# Définit un fichier qui stockera le processus ID du processus principal.
pid        /var/run/nginx.pid;

# Modifie la limite du nombre maximal de fichiers ouverts ( RLIMIT_NOFILE) pour les processus de travail. 
worker_rlimit_nofile 2000;

events {
    # Définit le nombre maximal de connexions simultanées pouvant être ouvertes par un processus de travail.
    worker_connections  1024;
    # Acceptez autant de connexions que possible, après que nginx ait reçu la notification d'une nouvelle connexion.
    multi_accept on;
}

http {
    # Active ou désactive l'émission de la version nginx sur les pages d'erreur et dans le champ d'en-tête de réponse «Serveur».
    server_tokens off;
    # Active ou désactive la journalisation des erreurs relatives aux fichiers introuvables dans error_log .
    log_not_found off;

    include       /etc/nginx/mime.types;
    # Définit le type MIME par défaut d'une réponse. 
    default_type  application/octet-stream;
    
    open_file_cache max=1000 inactive=20s;
    # Définit un délai après lequel les éléments open_file_cache doivent être validés.
    open_file_cache_valid 30s;
    # Définit le nombre minimum d'accès aux fichiers pendant la période configurée par le paramètre inactive de la directive open_file_cache.
    open_file_cache_min_uses 2;
    # Active ou désactive la mise en cache des erreurs de recherche de fichiers par open_file_cache .
    open_file_cache_errors on;
    # Limite la taille maximale d'un champ d'en-tête de demande compressé par HPACK.
    http2_max_field_size 64k;
    # Limite la taille maximale de toute la liste des en-têtes de demande après la décompression HPACK.
    http2_max_header_size 64k;

    # Définit la taille du tampon pour la lecture du corps de la demande client.
    client_body_buffer_size 10K;
    # Définit la taille du tampon pour la lecture de l'en-tête de la demande client.
    client_header_buffer_size 1k;
    # Définit la taille maximale autorisée du corps de la demande client, spécifiée dans le champ d'en-tête de demande «Content-Length».
    client_max_body_size 8m;
    # Définit le nombre maximum et sizede tampons utilisés pour lire un en-tête de demande client volumineux.
    large_client_header_buffers 4 32k;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Configure la journalisation. 
    error_log  /var/log/nginx/error.log warn;
    # Définit le chemin, le format et la configuration d'une écriture de journal en mémoire tampon. 
    access_log /var/log/nginx/access.log main buffer=16k;
    
    charset utf-8;
    # Active ou désactive l'utilisation de sendfile().
    sendfile        on;
    # Active ou désactive l'utilisation de l'option TCP_NOPUSH socket sous FreeBSD ou de l'option TCP_CORK socket sous Linux.
    tcp_nopush     on;
    # Active ou désactive l'utilisation de l'option TCP_NODELAY. L'option est activée lorsqu'une connexion passe à l'état de maintien en vie.
    tcp_nodelay    on;
    # Définit la taille maximale des types de tables de hachage. 
    types_hash_max_size 2048;

    # Définit la taille de la mémoire tampon utilisée pour lire la première partie de la réponse reçue du serveur mandaté.
    proxy_buffer_size   128k; 
    # Définit le nombre et la taille des tampons utilisés pour lire une réponse du serveur mandaté, pour une seule connexion.
    proxy_buffers   4 256k;
    # Limite la taille totale des tampons qui peuvent être occupés à envoyer une réponse au client alors que la réponse n'est pas encore entièrement lue. 
    proxy_busy_buffers_size   256k;

    # permettre au serveur de fermer la connexion sur le client qui ne répond pas, ce qui libérera de la mémoire
    reset_timedout_connection on;
    # délai de demande expiré -- par défaut 60
    client_header_timeout 60;
    client_body_timeout 60;
    # si le client cesse de répondre, libérer de la mémoire -- par défaut 60
    send_timeout 60;
    # le serveur fermera la connexion après ce délai -- par défaut 75
    keepalive_timeout 65;
    # nombre de demandes que le client peut faire sur keep-alive -- pour l'environnement de test
    keepalive_requests 100;

    # Active ou désactive le gzippage des réponses.
    gzip  on;
    # Désactive le gzippage des réponses pour les demandes dont les champs d'en-tête "User-Agent" correspondent à l'une des expressions régulières spécifiées.
    gzip_disable "msie6";
    
     # DDoS Mitigation 
     # Définit les paramètres d'une zone de mémoire partagée qui conservera les états de diverses clés.
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    # Définit la zone de mémoire partagée et le nombre maximal de connexions autorisées pour une valeur de clé donnée.
    limit_conn perip 100;
    # Définit la zone de mémoire partagée et la taille de rafale maximale des demandes.
    limit_req_zone $binary_remote_addr zone=engine:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/s;

    include /etc/nginx/conf.d/*.conf;
}